import google.generativeai as genai
import os
import time

import warnings
warnings.filterwarnings("ignore", category=UserWarning)
os.environ['GRPC_VERBOSITY'] = 'ERROR'
os.environ['GLOG_minloglevel'] = '2'

#############################################Configurando o Gemini#############################################
API_KEY = 'API'

genai.configure(api_key=API_KEY)

generation_config = {
  "candidate_count": 1,
  "temperature": 0.
}

safety_settings={
    'HATE': 'BLOCK_NONE',
    'HARASSMENT': 'BLOCK_NONE',
    'SEXUAL' : 'BLOCK_NONE',
    'DANGEROUS' : 'BLOCK_NONE'
    }
system_instruction =  "Estamos em um jogo de rpg.\n\ninicialmente eu poderei escolher um nome para o meu reino, meu  nome e esp√©cie. gostaria que o rpg fosse de estrat√©gia, contento quizes, perguntas e desi√µes de estrat√©gia. Eu serei o rei, e tomarei desi√ß√µes economicas, religiosas e militares. Quero que no INICIO de cada resposta tenha um menu b√°sico indicando o estatus do meu reino de: Felicidade[0-100%], Poder militar[0 - 100000], atual religi√£o do reino[no jogo existira religioes que n√£o exitem na vida real, como por exemplo uma religiao de orcs.], Dinheiro[0 - 100000],\nnome do meu reino. minhas de√ßisoes afetaram os status do meu reino. Durante o jogo poderei fazer aliados e inimigos mortais, sendo que eles podem me atacar ou me proteger. O jogo funcionar√° como se voce fosse um servo do reino que me explicasse o que est√° acontecendo e me pedisse para escolher o que fazer. Eu posso fazer perguntas para vc para vc me detalhar algo. Sempre que um novo imp√©rio entrar em contato, mostra os status de tal imp√©rio como a barra de menu b√°sica. Normalmente me de op√ß√µes de numeradas para eu fazer uma decis√£o. no inicio voce sempre receber√° um contexto na forma cronol√≥gica, s√≥ manter o contexto."
system_instruction_h = "eu quero que com os dados que eu te dei vc guarde as informa√ß√µes, sem t√≥picos e em √∫nico paragrafo, como se fosse um livro com todas as informa√ß√µes que eu te dei, sem ser em formato de jogo, como se vc fosse um narrador oniciente.Guarde os status do reino. Ignora o que lhe for dado em que esteja numerado(pois seria as op√ßoes do jogador, mas ele n√£o executara todas) Sempre que eu te mandar algo, escreva a continu√ß√£o da sua respostada dada anteriormente, com os novos dados. Escreva no m√°ximo 3 linhas e n√£o coloque nada que n√£o coloque caracteres especias.LEMBRE=SE DE ESCREVER OS STATUS DO REINO"
#O chat_history √© usado para guardar as informa√ß√µes do jogo de forma resumida e impessoal(para o jogo multiplayer), para economizar recursos do Gemini
# Usando gemini-2.5-pro (modelo est√°vel e atualizado)
model_h = genai.GenerativeModel(model_name='gemini-2.5-pro',generation_config=generation_config,system_instruction=system_instruction_h, safety_settings=safety_settings,)
chat_history = model_h.start_chat(history=[])
model = genai.GenerativeModel(model_name='gemini-2.5-pro',generation_config=generation_config,system_instruction=system_instruction, safety_settings=safety_settings,)
chat = model.start_chat(history=[])
###############################################################################################################
#pedindo informa√ß√µes para o usu√°rio para iniciar o jogo
try:
    mundos = os.listdir("mundos/")
    print("Aventuras j√° criadas: ")
    if mundos:
        for mundo in mundos:
            mundo = mundo.replace(".txt", "")
            print(f"- {mundo}")
    else:
        print("- Nenhuma aventura encontrada")
except FileNotFoundError:
    print("- Pasta mundos/ n√£o encontrada, ser√° criada automaticamente")
    os.makedirs("mundos/", exist_ok=True)

print("\n")
nome_avetura = input("Qual o nome da aventura? ")
nome = input("Qual √© o seu nome? ")
reino = input("Qual √© o nome do reino? ")
ra√ßa = input("Qual √© a ra√ßa do seu reino? ")
#perguntando se o usu√°rio j√° possui um reino
while(1):
  con = input("J√° possui um reino? ")
  if (con == "n√£o"):
      pergunta = "Quero Criar um reino chamado "+reino+". Meu nome √© "+nome+" e a ra√ßa do reino ser√° de "+ra√ßa+".Para Iniciar, gostaria de discutir a religi√£o do reino."
      break
  elif (con == "sim"):
      pergunta = "Eu sou o rei de "+reino+" e meu nome √© "+nome+" da "+ra√ßa+", gostaria de saber como est√° e o que est√° acontecendo em meu reino."
      break
  else:
    print("Responda sim ou n√£o")
#loop principal do jogo
#o conteudo √© usado para 'salvar' o jogo, para que o usu√°rio possa continuar de onde parou. √© possivel que se outra pessoa jogar ao mesmo tempo, tenha meio que um jogo multiplayer, mas sempre verificando para n√£o requerir muito do Gemini
arquivo_mundo = f'mundos/{nome_avetura}.txt'

# Carregar conte√∫do existente uma vez
try:
    with open(arquivo_mundo, 'r', encoding='utf-8') as f:
        conteudo = f.read()
except FileNotFoundError:
    conteudo = ""

while(pergunta != "fim"):
    try:
        mensagem = conteudo + "\n\n" + pergunta
        chat.send_message(mensagem)
        print("\n",chat.last.text,"\n")         
        continuacao = chat.last.text
        time.sleep(2)
        
        # Salvar hist√≥rico
        chat_history.send_message(continuacao + " guarde os status do reino, como religiao, poder militar, dinheiro e felicidade.")
        novo_conteudo = chat_history.last.text
        
        # Atualizar arquivo de forma mais eficiente
        with open(arquivo_mundo, 'a', encoding='utf-8') as f:
            f.write(novo_conteudo + "\n")
        
        # Atualizar conte√∫do em mem√≥ria
        conteudo += novo_conteudo + "\n"
        
        pergunta = input(f'PROMPT: ')
        
    except Exception as e:
        error_msg = str(e)
        if "404" in error_msg and "models/" in error_msg:
            print(f"‚ùå Erro: Modelo Gemini n√£o encontrado!")
            print(f"üîß Solu√ß√£o: O modelo foi atualizado. Verifique o c√≥digo.")
        elif "quota" in error_msg.lower() or "limit" in error_msg.lower():
            print(f"‚ö†Ô∏è Cota da API excedida. Aguarde alguns minutos.")
        elif "api" in error_msg.lower():
            print(f"üîë Erro de API: Verifique sua chave de API.")
        else:
            print(f"‚ùå Erro durante o jogo: {e}")
        
        print("Tentando continuar...")
        pergunta = input(f'PROMPT: ')

print("\nFim do jogo\n")

